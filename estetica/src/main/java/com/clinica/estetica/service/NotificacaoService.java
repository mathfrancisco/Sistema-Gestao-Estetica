package com.clinica.estetica.service;

import com.clinica.estetica.model.entity.Agendamento;
import com.clinica.estetica.model.entity.Cliente;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class NotificacaoService {

    private final EmailService emailService;
    private final SmsService smsService;
    private final AgendamentoService agendamentoService;
    private final ClienteService clienteService;

    @Value("${clinica.email.esteticista:esteticista@clinica.com}")
    private String emailEsteticista;

    @Value("${clinica.telefone.esteticista:11999999999}")
    private String telefoneEsteticista;

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy '√†s' HH:mm");
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    // ==================== NOTIFICA√á√ïES PARA CLIENTE ====================

    /**
     * Envia confirma√ß√£o de que a solicita√ß√£o foi recebida (Status: PENDENTE)
     */
    @Async
    public void enviarConfirmacaoSolicitacao(Agendamento agendamento) {
        log.info("Enviando confirma√ß√£o de solicita√ß√£o recebida - Agendamento ID: {}", agendamento.getId());

        try {
            Cliente cliente = agendamento.getCliente();
            String dataHora = agendamento.getDataHora().format(DATETIME_FORMATTER);

            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "Solicita√ß√£o Recebida - Agendamento";
                String mensagem = String.format(
                        "Ol√° %s,\n\n" +
                                "Recebemos sua solicita√ß√£o de agendamento!\n\n" +
                                "Detalhes Solicitados:\n" +
                                "Procedimento: %s\n" +
                                "Data/Hora: %s\n" +
                                "Esteticista: %s\n" +
                                "Valor: R$ %.2f\n\n" +
                                "Sua solicita√ß√£o ser√° avaliada pela nossa equipe e voc√™ receber√° " +
                                "a confirma√ß√£o em breve (geralmente em at√© 2 horas).\n\n" +
                                "Caso o hor√°rio n√£o esteja dispon√≠vel, entraremos em contato " +
                                "para sugerir outras op√ß√µes.\n\n" +
                                "Aguarde nossa confirma√ß√£o!\n\n" +
                                "Cl√≠nica de Est√©tica",
                        cliente.getNome(),
                        agendamento.getProcedimento().getNome(),
                        dataHora,
                        agendamento.getEsteticista(),
                        agendamento.getValorTotal()
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            if (cliente.getCelular() != null && !cliente.getCelular().isEmpty()) {
                String mensagemSms = String.format(
                        "Ol√° %s! Recebemos seu pedido de agendamento para %s. " +
                                "Voc√™ receber√° confirma√ß√£o em breve. - Cl√≠nica de Est√©tica",
                        cliente.getNome().split(" ")[0],
                        agendamento.getDataHora().format(DATE_FORMATTER)
                );

                smsService.enviarSms(cliente.getCelular(), mensagemSms);
            }

            log.info("Confirma√ß√£o de solicita√ß√£o enviada - Agendamento ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao enviar confirma√ß√£o de solicita√ß√£o - Agendamento ID: {}", agendamento.getId(), e);
        }
    }

    /**
     * Notifica cliente que agendamento foi APROVADO
     */
    @Async
    public void enviarAprovacaoAgendamento(Agendamento agendamento) {
        log.info("Enviando aprova√ß√£o de agendamento - ID: {}", agendamento.getId());

        try {
            Cliente cliente = agendamento.getCliente();
            String dataHora = agendamento.getDataHora().format(DATETIME_FORMATTER);

            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "‚úÖ Agendamento CONFIRMADO!";
                String mensagem = String.format(
                        "√ìtima not√≠cia, %s! üéâ\n\n" +
                                "Seu agendamento foi APROVADO e CONFIRMADO!\n\n" +
                                "üìÖ Detalhes do Agendamento:\n" +
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                                "üíÜ Procedimento: %s\n" +
                                "üìÜ Data/Hora: %s\n" +
                                "üë© Esteticista: %s\n" +
                                "‚è±Ô∏è Dura√ß√£o: %d minutos\n" +
                                "üí∞ Valor: R$ %.2f\n" +
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                                "‚ö†Ô∏è IMPORTANTE:\n" +
                                "- Chegue 10 minutos antes do hor√°rio\n" +
                                "- %s\n\n" +
                                "üì± Em caso de imprevistos, avise com anteced√™ncia.\n\n" +
                                "Aguardamos voc√™!\n\n" +
                                "Cl√≠nica de Est√©tica",
                        cliente.getNome(),
                        agendamento.getProcedimento().getNome(),
                        dataHora,
                        agendamento.getEsteticista(),
                        agendamento.getDuracaoMinutos(),
                        agendamento.getValorTotal(),
                        agendamento.getProcedimento().getPreparoNecessario() != null ?
                                agendamento.getProcedimento().getPreparoNecessario() : "Nenhum preparo especial necess√°rio"
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            if (cliente.getCelular() != null && !cliente.getCelular().isEmpty()) {
                String mensagemSms = String.format(
                        "‚úÖ %s, seu agendamento foi CONFIRMADO! %s √†s %s com %s. Aguardamos voc√™! - Cl√≠nica",
                        cliente.getNome().split(" ")[0],
                        agendamento.getDataHora().format(DATE_FORMATTER),
                        agendamento.getDataHora().format(TIME_FORMATTER),
                        agendamento.getEsteticista()
                );

                smsService.enviarSms(cliente.getCelular(), mensagemSms);
            }

            log.info("Aprova√ß√£o enviada com sucesso - Agendamento ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao enviar aprova√ß√£o - Agendamento ID: {}", agendamento.getId(), e);
        }
    }

    /**
     * Notifica cliente sobre proposta de novo hor√°rio
     */
    @Async
    public void enviarPropostaNovoHorario(Agendamento agendamento, LocalDateTime novoHorario, String motivo) {
        log.info("Enviando proposta de novo hor√°rio - Agendamento ID: {}", agendamento.getId());

        try {
            Cliente cliente = agendamento.getCliente();
            String horarioOriginal = agendamento.getDataHora().format(DATETIME_FORMATTER);
            String novoHorarioFormatado = novoHorario.format(DATETIME_FORMATTER);

            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "Proposta de Novo Hor√°rio - Agendamento";
                String mensagem = String.format(
                        "Ol√° %s,\n\n" +
                                "Sobre sua solicita√ß√£o de agendamento...\n\n" +
                                "Infelizmente o hor√°rio solicitado n√£o est√° dispon√≠vel:\n" +
                                "‚ùå Hor√°rio solicitado: %s\n" +
                                "Motivo: %s\n\n" +
                                "Mas temos uma √≥tima alternativa! ‚ú®\n\n" +
                                "‚úÖ NOVO HOR√ÅRIO PROPOSTO: %s\n\n" +
                                "Procedimento: %s\n" +
                                "Esteticista: %s\n" +
                                "Valor: R$ %.2f\n\n" +
                                "Para CONFIRMAR este novo hor√°rio, acesse:\n" +
                                "[LINK PARA CONFIRMAR]\n\n" +
                                "Ou entre em contato conosco para sugerir outro hor√°rio.\n\n" +
                                "Aguardamos seu retorno!\n\n" +
                                "Cl√≠nica de Est√©tica",
                        cliente.getNome(),
                        horarioOriginal,
                        motivo,
                        novoHorarioFormatado,
                        agendamento.getProcedimento().getNome(),
                        agendamento.getEsteticista(),
                        agendamento.getValorTotal()
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            if (cliente.getCelular() != null && !cliente.getCelular().isEmpty()) {
                String mensagemSms = String.format(
                        "%s, o hor√°rio %s n√£o est√° dispon√≠vel. Podemos em %s? " +
                                "Confirme pelo link ou ligue para n√≥s. - Cl√≠nica",
                        cliente.getNome().split(" ")[0],
                        agendamento.getDataHora().format(TIME_FORMATTER),
                        novoHorario.format(DATETIME_FORMATTER)
                );

                smsService.enviarSms(cliente.getCelular(), mensagemSms);
            }

            log.info("Proposta de novo hor√°rio enviada - Agendamento ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao enviar proposta de novo hor√°rio - Agendamento ID: {}", agendamento.getId(), e);
        }
    }

    /**
     * Envia lembrete de agendamento 24h antes (j√° existente, mantido)
     */
    @Async
    public void enviarLembreteAgendamento(Agendamento agendamento) {
        log.info("Enviando lembrete de agendamento ID: {}", agendamento.getId());

        try {
            Cliente cliente = agendamento.getCliente();
            String dataHora = agendamento.getDataHora().format(DATETIME_FORMATTER);

            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "Lembrete: Agendamento Amanh√£! üìÖ";
                String mensagem = String.format(
                        "Ol√° %s,\n\n" +
                                "Este √© um lembrete do seu agendamento AMANH√É:\n\n" +
                                "üìÖ %s\n" +
                                "üíÜ %s\n" +
                                "üë© Com %s\n" +
                                "üí∞ R$ %.2f\n\n" +
                                "üìç Endere√ßo: [Endere√ßo da cl√≠nica]\n" +
                                "‚è∞ Chegue 10 minutos antes\n\n" +
                                "Aguardamos voc√™!\n\n" +
                                "Cl√≠nica de Est√©tica",
                        cliente.getNome(),
                        dataHora,
                        agendamento.getProcedimento().getNome(),
                        agendamento.getEsteticista(),
                        agendamento.getValorTotal()
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            if (cliente.getCelular() != null && !cliente.getCelular().isEmpty()) {
                String mensagemSms = String.format(
                        "Lembrete: %s, voc√™ tem agendamento amanh√£ √†s %s - %s. Aguardamos voc√™! - Cl√≠nica",
                        cliente.getNome().split(" ")[0],
                        agendamento.getDataHora().format(TIME_FORMATTER),
                        agendamento.getProcedimento().getNome()
                );

                smsService.enviarSms(cliente.getCelular(), mensagemSms);
            }

            agendamentoService.marcarLembreteEnviado(agendamento.getId());

            log.info("Lembrete enviado com sucesso - Agendamento ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao enviar lembrete - Agendamento ID: {}", agendamento.getId(), e);
        }
    }

    /**
     * Envia confirma√ß√£o ap√≥s cria√ß√£o de agendamento direto (j√° existente)
     */
    @Async
    public void enviarConfirmacaoAgendamento(Agendamento agendamento) {
        log.info("Enviando confirma√ß√£o de agendamento direto - ID: {}", agendamento.getId());

        try {
            Cliente cliente = agendamento.getCliente();
            String dataHora = agendamento.getDataHora().format(DATETIME_FORMATTER);

            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "Agendamento Confirmado - Cl√≠nica de Est√©tica";
                String mensagem = String.format(
                        "Ol√° %s,\n\n" +
                                "Seu agendamento foi confirmado com sucesso!\n\n" +
                                "Detalhes:\n" +
                                "Procedimento: %s\n" +
                                "Data/Hora: %s\n" +
                                "Esteticista: %s\n" +
                                "Valor: R$ %.2f\n" +
                                "Dura√ß√£o: %d minutos\n\n" +
                                "Aguardamos voc√™!\n\n" +
                                "Cl√≠nica de Est√©tica",
                        cliente.getNome(),
                        agendamento.getProcedimento().getNome(),
                        dataHora,
                        agendamento.getEsteticista(),
                        agendamento.getValorTotal(),
                        agendamento.getDuracaoMinutos()
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            log.info("Confirma√ß√£o enviada - Agendamento ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao enviar confirma√ß√£o - Agendamento ID: {}", agendamento.getId(), e);
        }
    }

    /**
     * Envia notifica√ß√£o de reagendamento
     */
    @Async
    public void enviarNotificacaoReagendamento(Agendamento agendamento) {
        log.info("Enviando notifica√ß√£o de reagendamento - ID: {}", agendamento.getId());

        try {
            Cliente cliente = agendamento.getCliente();
            String dataHora = agendamento.getDataHora().format(DATETIME_FORMATTER);

            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "Agendamento Reagendado";
                String mensagem = String.format(
                        "Ol√° %s,\n\n" +
                                "Seu agendamento foi reagendado:\n\n" +
                                "NOVO hor√°rio: %s\n" +
                                "Procedimento: %s\n" +
                                "Esteticista: %s\n\n" +
                                "Aguardamos voc√™ no novo hor√°rio!\n\n" +
                                "Cl√≠nica de Est√©tica",
                        cliente.getNome(),
                        dataHora,
                        agendamento.getProcedimento().getNome(),
                        agendamento.getEsteticista()
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            log.info("Notifica√ß√£o de reagendamento enviada - ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao enviar notifica√ß√£o de reagendamento - ID: {}", agendamento.getId(), e);
        }
    }

    /**
     * Envia mensagem de cancelamento (j√° existente)
     */
    @Async
    public void enviarCancelamentoAgendamento(Agendamento agendamento) {
        log.info("Enviando notifica√ß√£o de cancelamento - Agendamento ID: {}", agendamento.getId());

        try {
            Cliente cliente = agendamento.getCliente();
            String dataHora = agendamento.getDataHora().format(DATETIME_FORMATTER);

            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "Agendamento Cancelado";
                String mensagem = String.format(
                        "Ol√° %s,\n\n" +
                                "Informamos que seu agendamento foi cancelado.\n\n" +
                                "Procedimento: %s\n" +
                                "Data/Hora: %s\n" +
                                "Motivo: %s\n\n" +
                                "Para reagendar, entre em contato conosco.\n\n" +
                                "Cl√≠nica de Est√©tica",
                        cliente.getNome(),
                        agendamento.getProcedimento().getNome(),
                        dataHora,
                        agendamento.getMotivoCancelamento() != null ?
                                agendamento.getMotivoCancelamento() : "N√£o informado"
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            log.info("Cancelamento notificado - Agendamento ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao enviar cancelamento - Agendamento ID: {}", agendamento.getId(), e);
        }
    }

    // ==================== NOTIFICA√á√ïES PARA ESTETICISTA ====================

    /**
     * Notifica esteticista sobre NOVA solicita√ß√£o de agendamento
     */
    @Async
    public void notificarEsteticistaNovoAgendamento(Agendamento agendamento) {
        log.info("Notificando esteticista sobre novo agendamento - ID: {}", agendamento.getId());

        try {
            String dataHora = agendamento.getDataHora().format(DATETIME_FORMATTER);

            // Email para esteticista
            String assunto = "üîî NOVA Solicita√ß√£o de Agendamento";
            String mensagem = String.format(
                    "Nova solicita√ß√£o de agendamento recebida!\n\n" +
                            "AGENDAMENTO #%d\n" +
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                            "Cliente: %s\n" +
                            "Telefone: %s\n" +
                            "Procedimento: %s\n" +
                            "Data/Hora: %s\n" +
                            "Esteticista: %s\n" +
                            "Valor: R$ %.2f\n" +
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                            "‚ö†Ô∏è A√á√ÉO NECESS√ÅRIA:\n" +
                            "Acesse o sistema para APROVAR ou SUGERIR outro hor√°rio.\n\n" +
                            "[LINK PARA O SISTEMA]\n\n" +
                            "Sistema da Cl√≠nica",
                    agendamento.getId(),
                    agendamento.getCliente().getNome(),
                    agendamento.getCliente().getCelular(),
                    agendamento.getProcedimento().getNome(),
                    dataHora,
                    agendamento.getEsteticista(),
                    agendamento.getValorTotal()
            );

            emailService.enviarEmail(emailEsteticista, assunto, mensagem);

            // SMS para esteticista
            String mensagemSms = String.format(
                    "NOVA solicita√ß√£o de agendamento! %s - %s em %s. Acesse o sistema para aprovar.",
                    agendamento.getCliente().getNome(),
                    agendamento.getProcedimento().getNome(),
                    dataHora
            );

            smsService.enviarSms(telefoneEsteticista, mensagemSms);

            log.info("Esteticista notificada - Agendamento ID: {}", agendamento.getId());

        } catch (Exception e) {
            log.error("Erro ao notificar esteticista - Agendamento ID: {}", agendamento.getId(), e);
        }
    }

    // ==================== NOTIFICA√á√ïES GERAIS (j√° existentes) ====================

    @Async
    public void enviarMensagensAniversario() {
        log.info("Processando mensagens de anivers√°rio");

        try {
            List<Cliente> aniversariantes = clienteService.listarAniversariantesdoDia();

            for (Cliente cliente : aniversariantes) {
                enviarMensagemAniversario(cliente);
            }

            log.info("Mensagens de anivers√°rio enviadas para {} clientes", aniversariantes.size());

        } catch (Exception e) {
            log.error("Erro ao processar mensagens de anivers√°rio", e);
        }
    }

    @Async
    public void enviarMensagemAniversario(Cliente cliente) {
        log.info("Enviando mensagem de anivers√°rio para: {}", cliente.getNome());

        try {
            if (cliente.getEmail() != null && !cliente.getEmail().isEmpty()) {
                String assunto = "Feliz Anivers√°rio! üéâ";
                String mensagem = String.format(
                        "Ol√° %s,\n\n" +
                                "Parab√©ns pelo seu anivers√°rio! üéÇüéâ\n\n" +
                                "Desejamos um dia maravilhoso!\n\n" +
                                "PRESENTE ESPECIAL: 10%% de desconto em qualquer procedimento este m√™s!\n\n" +
                                "Agende j√°!\n\n" +
                                "Com carinho,\nCl√≠nica de Est√©tica",
                        cliente.getNome()
                );

                emailService.enviarEmail(cliente.getEmail(), assunto, mensagem);
            }

            log.info("Mensagem de anivers√°rio enviada para: {}", cliente.getNome());

        } catch (Exception e) {
            log.error("Erro ao enviar mensagem de anivers√°rio para: {}", cliente.getNome(), e);
        }
    }

    @Async
    public void processarLembretesAgendamentos() {
        log.info("Processando lembretes de agendamentos");

        try {
            List<Agendamento> agendamentos = agendamentoService.buscarAgendamentosSemLembrete();
            LocalDateTime limite = LocalDateTime.now().plusHours(24);

            for (Agendamento agendamento : agendamentos) {
                if (agendamento.getDataHora().isBefore(limite)) {
                    enviarLembreteAgendamento(agendamento);
                }
            }

            log.info("Lembretes processados: {}", agendamentos.size());

        } catch (Exception e) {
            log.error("Erro ao processar lembretes", e);
        }
    }

    @Async
    public void enviarAlertaEstoqueBaixo(String emailDestino) {
        log.info("Enviando alerta de estoque baixo");

        try {
            String assunto = "‚ö†Ô∏è Alerta: Produtos com Estoque Baixo";
            String mensagem = "Existem produtos com estoque abaixo do m√≠nimo. Verifique o sistema.";

            emailService.enviarEmail(emailDestino, assunto, mensagem);

        } catch (Exception e) {
            log.error("Erro ao enviar alerta de estoque", e);
        }
    }

    @Async
    public void enviarAlertaContasVencidas(String emailDestino) {
        log.info("Enviando alerta de contas vencidas");

        try {
            String assunto = "‚ö†Ô∏è Alerta: Contas Vencidas";
            String mensagem = "Existem contas a receber vencidas. Verifique o sistema.";

            emailService.enviarEmail(emailDestino, assunto, mensagem);

        } catch (Exception e) {
            log.error("Erro ao enviar alerta de contas vencidas", e);
        }
    }
}